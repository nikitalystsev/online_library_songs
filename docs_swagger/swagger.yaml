basePath: /
definitions:
  dto.ErrorResponse:
    properties:
      error_msg:
        type: string
    type: object
  dto.NewSongDTO:
    properties:
      group:
        type: string
      song:
        type: string
    type: object
  dto.SongParamDTO:
    properties:
      group:
        type: string
      link:
        type: string
      releaseDate:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
  models.JSONSongModel:
    properties:
      group:
        type: string
      id:
        type: string
      link:
        type: string
      release_date:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for LibrarySongs Application
  title: LibrarySongs API
  version: "1.0"
paths:
  /api/v1/songs:
    get:
      consumes:
      - application/json
      operationId: getPageSongs
      parameters:
      - description: Название группы
        in: query
        name: group
        type: string
      - description: Название песни
        in: query
        name: song
        type: string
      - description: Дата выхода песни
        in: query
        name: release_date
        type: string
      - description: Текст книги
        in: query
        name: text
        type: string
      - description: Ссылка на песню
        in: query
        name: link
        type: string
      - description: Лимит
        in: query
        name: limit
        type: string
      - description: Смещение
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список песен
          schema:
            items:
              $ref: '#/definitions/models.JSONSongModel'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Песни не найдены
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения данных библиотеки с фильтрацией по всем полям и пагинацией
      tags:
      - songs
    post:
      consumes:
      - application/json
      operationId: addNewSong
      parameters:
      - description: Группа и название песни
        in: body
        name: nemSong
        required: true
        schema:
          $ref: '#/definitions/dto.NewSongDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное создание песни
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Песня уже существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод добавления новой песни
      tags:
      - songs
  /api/v1/songs/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteByID
      parameters:
      - description: Идентификатор песни
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление песни
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Песни не найдены
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод удаления песни
      tags:
      - songs
    put:
      consumes:
      - application/json
      operationId: updateByID
      parameters:
      - description: Идентификатор песни
        in: path
        name: id
        required: true
        type: string
      - description: Параметры песни
        in: body
        name: newSongParams
        required: true
        schema:
          $ref: '#/definitions/dto.SongParamDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление данных песни
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод изменения данных песни
      tags:
      - songs
  /api/v1/songs/{id}/verses:
    get:
      consumes:
      - application/json
      operationId: getSongByVerses
      parameters:
      - description: Идентификатор песни
        in: path
        name: id
        required: true
        type: string
      - description: Лимит
        in: query
        name: limit
        type: string
      - description: Смещение
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Куплеты
          schema:
            items:
              type: string
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения данных библиотеки с фильтрацией по всем полям и пагинацией
      tags:
      - songs
swagger: "2.0"
